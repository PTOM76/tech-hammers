plugins {
	id 'fabric-loom' version '1.3-SNAPSHOT'
	id 'maven-publish'
	id 'com.matthewprenger.cursegradle' version '1.+'
	id "com.modrinth.minotaur" version "2.+"
}

apply plugin: "com.modrinth.minotaur"
apply plugin: "com.matthewprenger.cursegradle"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url 'https://jitpack.io' }
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.pitan76.net/" }
	maven { url "https://maven.architectury.dev/" }
	maven { url "https://www.cursemaven.com" }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "net.pitan76:mcpitanlib-fabric${rootProject.mcpitanlib_version}"
	include "net.pitan76:mcpitanlib_checker-fabric:${rootProject.mcpitanlib_checker_version}"

	modImplementation include ("com.github.Draylar:magna:${project.magna_version}") {
		exclude group: "net.fabricmc"
		exclude group: "com.jamieswhiteshirt"
		exclude group: "com.terraformersmc"
	}

	modCompileOnly "curse.maven:vanillahammers-317756:${project.hammers_version}"
	modImplementation "curse.maven:vanillahammers-317756:${project.hammers_version}"
	modImplementation ("com.github.Draylar:static-content:1.0.2") {
		exclude group: "net.fabricmc"
	}
	modImplementation ("io.github.cottonmc:StaticData:1.1.2") {
		exclude group: "net.fabricmc.fabric-api"
	}

	modImplementation 'RebornCore:RebornCore-1.18:+'
	modImplementation 'TechReborn:TechReborn-1.18:+'

	modImplementation "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
}

if (System.getenv("CURSEFORGE_TOKEN") != null) {
	curseforge {
		apiKey = System.getenv("CURSEFORGE_TOKEN")
		project {
			id = '960741'
			changelog = project.changelog
			releaseType = 'release'
			addGameVersion "Fabric"
			addGameVersion '1.18.1'
			addGameVersion '1.18.2'
			addGameVersion '1.19'
			addGameVersion '1.19.1'
			addGameVersion '1.19.2'
			relations {
				requiredDependency "fabric-api"
				requiredDependency "mcpitanlibarch"
				requiredDependency "architectury-api"
				requiredDependency "vanilla-hammers"
				requiredDependency "vanilla-excavators"
				optionalDependency "techreborn"
				optionalDependency "reborncore"
			}

			mainArtifact(tasks.remapJar)
		}
	}
}

if (System.getenv("MODRINTH_TOKEN") != null) {
	modrinth {
		token = System.getenv("MODRINTH_TOKEN")
		projectId = 'styMEyoE'
		versionNumber = project.mod_version + "-fabric"
		gameVersions = [project.minecraft_version]
		versionType = 'release'
		uploadFile = tasks.remapJar
		changelog = project.changelog
		loaders = ["fabric"]
		dependencies {
			required.project "P7dR8mSH" // Fabric API
		}
	}
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"
	it.options.release = targetJavaVersion

	options.release = 17
}

java {
	def javaVersion = JavaVersion.toVersion(targetJavaVersion)
	if (JavaVersion.current() < javaVersion) {
		toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
	}
	archivesBaseName = project.archives_base_name
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
